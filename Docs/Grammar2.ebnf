Program        = { Statement | ClassDefinition | FunctionDefinition } ;

Statement      = VariableDeclaration | Assignment | Expression | ControlFlow | ReturnStatement | ConstDeclaration ;

Block          = "{" { Statement } "}" ;

VariableDeclaration = "var" Identifier [ "=" Expression ] ;

ConstDeclaration     = "const" Identifier [ "=" Expression ] ;

Assignment         = Identifier "=" Expression ;

Type               = "int" | "float" | "bool" | "char" | "byte" | "long" | "string" | "null" | Identifier | GenericType ;

GenericType        = Identifier "<" Type ">" ;

Expression         = Literal | Identifier | BinaryExpression | FunctionCall | ObjectCreation ;

Literal            = Number | StringLiteral | CharLiteral | BooleanLiteral | "null" ;

Number             = Digit { Digit } ;

StringLiteral      = '"' { Character } '"' ;

CharLiteral        = "'" { Character } "'" ; 

BooleanLiteral     = "true" | "false" ;

Identifier         = Letter { Letter | Digit | "_" } ;

ClassDefinition    = "class" Identifier [ "<" TypeParameter ">" ] "{" { FieldDefinition | MethodDefinition } "}" ;

TypeParameter      = Identifier ;

FieldDefinition    = VisibilityModifier? ("var" | "const") Identifier [ "=" Expression ] ;

VisibilityModifier = "pub" | "pri" ;

MethodDefinition   = VisibilityModifier? ("func" | "function" | "set") ReturnType Identifier "(" [ ParameterList ] ")" Block ;

ReturnType         = Type | "void" ;

ParameterList      = Parameter { "," Parameter } ;

Parameter          = Identifier [ ":" Type ] ;

FunctionDefinition = "function" | "func" | "set" | "const" [ Type ] Identifier "(" [ ParameterList ] ")" Block ;

FunctionCall       = Identifier "(" [ ArgumentList ] ")" ;

ObjectCreation     = Identifier "(" [ ArgumentList ] ")" ;

ArgumentList       = Expression { "," Expression } ;

ReturnStatement    = "return" [ Expression ] ;

ControlFlow        = IfStatement | Loop | ForLoop | ForeachLoop ;

IfStatement        = "if" "(" Expression ")" Block [ "else" Block ] ;

Loop               = "loop" Block ;

ForLoop            = "for" "(" Identifier "=" Expression ";" Expression ";" Expression ")" Block ;

ForeachLoop        = "foreach" "(" Identifier "in" Expression ")" Block ;

BinaryExpression   = Expression Operator Expression ;

Operator           = "+" | "-" | "*" | "/" | "^" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" ;

ImportStatement    = "import" ( WildcardImport | SpecificImport | RenamedImport ) ;

WildcardImport     = "*" "from" ModulePath ;

SpecificImport     = ImportPath "from" ModulePath ;

RenamedImport      = ImportPath "as" Identifier ;

ImportPath         = Identifier { "/" Identifier } ;

ModulePath         = StringLiteral ;

IncludeStatement   = "include" IncludePath ;

IncludePath        = StringLiteral ;
